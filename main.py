
import asyncio
import uuid
import uvicorn
import os
import json
import sqlite3
import csv
from datetime import datetime, timedelta
from typing import Dict, Optional, List
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException, BackgroundTasks
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

class DatabaseManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite"""
    
    def __init__(self, db_path: str = "applications.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS applications (
                    id TEXT PRIMARY KEY,
                    form_name TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP,
                    approved_at TIMESTAMP,
                    data TEXT,
                    backup_file TEXT
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS statistics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    date TEXT,
                    total_received INTEGER DEFAULT 0,
                    total_approved INTEGER DEFAULT 0,
                    total_rejected INTEGER DEFAULT 0,
                    startup_forms INTEGER DEFAULT 0,
                    student_forms INTEGER DEFAULT 0
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def save_application(self, app_id: str, form_name: str, data: dict, backup_file: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO applications 
                (id, form_name, status, created_at, data, backup_file)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (app_id, form_name, 'pending', datetime.now(), json.dumps(data), backup_file))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    def update_application_status(self, app_id: str, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            approved_at = datetime.now() if status == 'approved' else None
            cursor.execute('''
                UPDATE applications 
                SET status = ?, approved_at = ?
                WHERE id = ?
            ''', (status, approved_at, app_id))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def get_pending_applications(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, form_name, data, created_at 
                FROM applications 
                WHERE status = 'pending'
                ORDER BY created_at DESC
            ''')
            
            results = []
            for row in cursor.fetchall():
                results.append({
                    'id': row[0],
                    'form_name': row[1],
                    'data': json.loads(row[2]),
                    'created_at': row[3]
                })
            
            conn.close()
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def get_application(self, app_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, form_name, data, status, created_at 
                FROM applications 
                WHERE id = ?
            ''', (app_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                return {
                    'id': row[0],
                    'form_name': row[1],
                    'data': json.loads(row[2]),
                    'status': row[3],
                    'created_at': row[4]
                }
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    def cleanup_old_applications(self, days_old: int = 30):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cutoff_date = datetime.now() - timedelta(days=days_old)
            cursor.execute('''
                DELETE FROM applications 
                WHERE created_at < ? AND status != 'pending'
            ''', (cutoff_date,))
            
            deleted_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            if deleted_count > 0:
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
            return 0

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) FROM applications')
            total_received = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM applications WHERE status = "approved"')
            total_approved = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM applications WHERE status = "rejected"')
            total_rejected = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM applications WHERE status = "pending"')
            pending = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM applications WHERE form_name = "–°—Ç–∞—Ä—Ç–∞–ø"')
            startup_forms = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM applications WHERE form_name = "–°—Ç—É–¥–µ–Ω—Ç"')
            student_forms = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total_received': total_received,
                'total_approved': total_approved,
                'total_rejected': total_rejected,
                'pending': pending,
                'startup_forms': startup_forms,
                'student_forms': student_forms
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total_received': 0,
                'total_approved': 0,
                'total_rejected': 0,
                'pending': 0,
                'startup_forms': 0,
                'student_forms': 0
            }
    
    def export_to_csv(self, status: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            query = 'SELECT * FROM applications'
            if status:
                query += ' WHERE status = ?'
                cursor.execute(query, (status,))
            else:
                cursor.execute(query)
            
            filename = f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['ID', 'Form Name', 'Status', 'Created At', 'Approved At', 'Data'])
                writer.writerows(cursor.fetchall())
            
            conn.close()
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
db_manager = DatabaseManager()

def generate_application_id() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞—è–≤–∫–∏"""
    return str(uuid.uuid4())[:8]

def validate_webhook_data(data: dict) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö webhook"""
    try:
        required_fields = ['eventType', 'data']
        if not all(field in data for field in required_fields):
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {required_fields}")
            return False
            
        if data['eventType'] != 'FORM_RESPONSE':
            logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {data['eventType']}")
            return False
            
        if 'fields' not in data.get('data', {}):
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è —Ñ–æ—Ä–º—ã")
            return False
            
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def backup_application(app_id: str, data: dict) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        backup_data = {
            "id": app_id,
            "timestamp": datetime.now().isoformat(),
            "data": data
        }
        filename = f"backup_{app_id}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
        logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∑–∞—è–≤–∫–∏ #{app_id}")
        return filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None

def format_application_message(data: dict, app_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        message = f"üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}</b>\n\n"

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Tally
        fields = data.get('data', {}).get('fields', [])
        form_name = data.get('data', {}).get('formName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞')

        message += f"üìù <b>–¢–∏–ø —Ñ–æ—Ä–º—ã:</b> {form_name}\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
        processed_fields = 0
        for field in fields:
            label = field.get('label', '')
            value = field.get('value', '')
            field_type = field.get('type', '')

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, False, –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
            if not value or value in [False, []] or (field.get('key', '').count('_') > 1):
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π
            if field_type == 'CHECKBOXES' and isinstance(value, list):
                # –î–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
                options = field.get('options', [])
                selected_texts = []
                for option_id in value:
                    for option in options:
                        if option.get('id') == option_id:
                            selected_texts.append(option.get('text', ''))
                if selected_texts:
                    value = ', '.join(selected_texts)

            if value and value != False:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
                icon = "üìå"
                if "–∏–º—è" in label.lower() or "–Ω–∞–∑–≤–∞–Ω–∏–µ" in label.lower():
                    icon = "üë§"
                elif "email" in label.lower() or "–ø–æ—á—Ç–∞" in label.lower():
                    icon = "üìß"
                elif "—Ç–µ–ª–µ—Ñ–æ–Ω" in label.lower():
                    icon = "üì±"
                elif "telegram" in label.lower():
                    icon = "üí¨"
                elif "–≥–æ—Ä–æ–¥" in label.lower() or "—Å—Ç—Ä–∞–Ω–∞" in label.lower():
                    icon = "üåç"
                elif "—É—Ä–æ–≤–µ–Ω—å" in label.lower():
                    icon = "‚≠ê"
                elif "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ" in label.lower() or "—Ç–∏–ø" in label.lower():
                    icon = "ü§ù"
                elif "–æ–ø—ã—Ç" in label.lower() or "–Ω–∞–≤—ã–∫–∏" in label.lower():
                    icon = "üíº"
                elif "–æ–ø–∏—Å–∞–Ω–∏–µ" in label.lower() or "–æ —Å–µ–±–µ" in label.lower():
                    icon = "üìù"
                elif "–∫–ª—é—á–µ–≤—ã–µ" in label.lower():
                    icon = "üîë"

                message += f"{icon} <b>{label}:</b> {value}\n"
                processed_fields += 1

        if processed_fields == 0:
            message += "‚ö†Ô∏è <i>–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</i>\n"

        message += f"\n‚ö° –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: /approve {app_id}"
        message += f"\n‚ùå –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: /reject {app_id}"

        return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return f"üìã <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ #{app_id}</b>\n\n‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

def format_public_message(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        fields = data.get('data', {}).get('fields', [])
        form_name = data.get('data', {}).get('formName', '')

        if form_name == "–°—Ç—É–¥–µ–Ω—Ç":
            message = "üéì <b>–ò—â–µ—Ç —Ä–∞–±–æ—Ç—É/—Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É</b>\n\n"
        elif form_name == "–°—Ç–∞—Ä—Ç–∞–ø":
            message = "üöÄ <b>–ò—â–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n"
        else:
            message = "üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π
        field_map = {}
        for field in fields:
            label = field.get('label', '').lower()
            value = field.get('value', '')
            field_type = field.get('type', '')

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, False, –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
            if not value or value in [False, []] or (field.get('key', '').count('_') > 1):
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
            if field_type == 'CHECKBOXES' and isinstance(value, list):
                options = field.get('options', [])
                selected_texts = []
                for option_id in value:
                    for option in options:
                        if option.get('id') == option_id:
                            selected_texts.append(option.get('text', ''))
                if selected_texts:
                    value = ', '.join(selected_texts)

            if value and value != False:
                field_map[label] = value

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–æ—Ä–º—ã
        if form_name == "–°—Ç—É–¥–µ–Ω—Ç":
            if '–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è' in field_map:
                message += f"üë§ <b>–ò–º—è:</b> {field_map['–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è']}\n"
            if '–∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å?' in field_map:
                message += f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {field_map['–∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å?']}\n"
            if '—É—Ä–æ–≤–µ–Ω—å –≤–∞—à–∏—Ö —É–º–µ–Ω–∏–π' in field_map:
                message += f"‚≠ê <b>–£—Ä–æ–≤–µ–Ω—å:</b> {field_map['—É—Ä–æ–≤–µ–Ω—å –≤–∞—à–∏—Ö —É–º–µ–Ω–∏–π']}\n"
            if '—Å —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç–µ/—Ä–∞–±–æ—Ç–∞–ª–∏' in field_map:
                message += f"üíº <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b> {field_map['—Å —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç–µ/—Ä–∞–±–æ—Ç–∞–ª–∏']}\n"
            if '–Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ?' in field_map:
                message += f"üìù <b>–û —Å–µ–±–µ:</b> {field_map['–Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ?']}\n"
            if '–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞' in field_map:
                message += f"üåç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {field_map['–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞']}\n"

            # –ö–æ–Ω—Ç–∞–∫—Ç—ã
            if 'e-mail' in field_map:
                message += f"\nüìß <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {field_map['e-mail']}"
            if 'telegram' in field_map:
                message += f"\nüí¨ <b>Telegram:</b> {field_map['telegram']}"

        elif form_name == "–°—Ç–∞—Ä—Ç–∞–ø":
            if '–Ω–∞–∑–≤–∞–Ω–∏–µ/–∏–º—è' in field_map:
                message += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {field_map['–Ω–∞–∑–≤–∞–Ω–∏–µ/–∏–º—è']}\n"
            if '–∫–æ–≥–æ –∏—â–∏—Ç–µ?' in field_map:
                message += f"üéØ <b>–ò—â–µ—Ç:</b> {field_map['–∫–æ–≥–æ –∏—â–∏—Ç–µ?']}\n"
            if '—Ç–∏–ø —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞' in field_map:
                message += f"ü§ù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {field_map['—Ç–∏–ø —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞']}\n"
            if '–∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞' in field_map:
                message += f"‚≠ê <b>–£—Ä–æ–≤–µ–Ω—å:</b> {field_map['–∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞']}\n"
            if '–æ–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É/–ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–¥–∞—á–∏' in field_map:
                message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {field_map['–æ–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É/–ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–¥–∞—á–∏']}\n"
            if '–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞' in field_map:
                message += f"üîë <b>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:</b> {field_map['–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞']}\n"
            if '–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞' in field_map:
                message += f"üåç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {field_map['–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞']}\n"

            # –ö–æ–Ω—Ç–∞–∫—Ç—ã
            if 'e-mail' in field_map:
                message += f"\nüìß <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {field_map['e-mail']}"
            if 'telegram(–µ—Å–ª–∏ –µ—Å—Ç—å)' in field_map:
                message += f"\nüí¨ <b>Telegram:</b> {field_map['telegram(–µ—Å–ª–∏ –µ—Å—Ç—å)']}"

        return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏"

async def send_notification_to_admin(message: str, reply_markup: InlineKeyboardMarkup = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.send_message(ADMIN_ID, message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        if message.from_user.id == ADMIN_ID:
            stats = db_manager.get_statistics()
            stats_message = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {stats['total_received']}\n"
                f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['total_approved']}\n"
                f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['total_rejected']}\n"
                f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending']}\n"
                f"‚Ä¢ –°—Ç–∞—Ä—Ç–∞–ø—ã: {stats['startup_forms']}\n"
                f"‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç—ã: {stats['student_forms']}"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö", callback_data="pending_list")],
                [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_menu")]
            ])
            
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
                "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ /approve <ID> - –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É\n"
                "‚Ä¢ /reject <ID> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\n"
                "‚Ä¢ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "‚Ä¢ /pending - —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫\n\n"
                "‚ö° <b>–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
                "‚Ä¢ /bulk - –º–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏\n"
                "‚Ä¢ /cleanup - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏\n\n"
                "üìä <b>–î–∞–Ω–Ω—ã–µ:</b>\n"
                "‚Ä¢ /export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ /restore - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞\n\n"
                f"{stats_message}\n\n"
                "üîó –ó–∞—è–≤–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ webhook.",
                reply_markup=keyboard
            )
        else:
            await message.answer("ü§ñ –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("stats"))
async def stats_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        stats = db_manager.get_statistics()
        stats_message = (
            f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üì• <b>–ü–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫:</b> {stats['total_received']}\n"
            f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–æ:</b> {stats['total_approved']}\n"
            f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:</b> {stats['total_rejected']}\n"
            f"‚è≥ <b>–í –æ–∂–∏–¥–∞–Ω–∏–∏:</b> {stats['pending']}\n\n"
            f"üìä <b>–ü–æ —Ç–∏–ø–∞–º —Ñ–æ—Ä–º:</b>\n"
            f"üöÄ –°—Ç–∞—Ä—Ç–∞–ø—ã: {stats['startup_forms']}\n"
            f"üéì –°—Ç—É–¥–µ–Ω—Ç—ã: {stats['student_forms']}\n\n"
            f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è:</b> {(stats['total_approved'] / max(stats['total_received'], 1) * 100):.1f}%\n"
            f"üïê <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        )
        await message.answer(stats_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message(Command("pending"))
async def pending_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pending"""
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        pending_apps = db_manager.get_pending_applications()
        
        if not pending_apps:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
            return
            
        pending_list = "‚è≥ <b>–ó–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:</b>\n\n"
        for app in pending_apps[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            created_time = datetime.fromisoformat(app['created_at']).strftime('%d.%m %H:%M')
            pending_list += f"‚Ä¢ #{app['id']} - {app['form_name']} ({created_time})\n"
            
        if len(pending_apps) > 10:
            pending_list += f"\n... –∏ –µ—â–µ {len(pending_apps) - 10} –∑–∞—è–≤–æ–∫"
            
        await message.answer(pending_list)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pending_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.")

@dp.message(Command("export"))
async def export_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        filename = db_manager.export_to_csv()
        if filename:
            with open(filename, 'rb') as file:
                await bot.send_document(ADMIN_ID, file, caption="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫")
            os.remove(filename)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(Command("cleanup"))
async def cleanup_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫"""
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        deleted_count = db_manager.cleanup_old_applications(30)
        await message.answer(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {deleted_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(Command("bulk"))
async def bulk_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        pending_apps = db_manager.get_pending_applications()
        
        if not pending_apps:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.")
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ", callback_data="bulk_approve_students")],
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã", callback_data="bulk_approve_startups")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π", callback_data="bulk_reject_old")]
        ])
        
        await message.answer(
            f"‚ö° <b>–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            f"üìä –ó–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {len(pending_apps)}\n"
            f"üéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {len([app for app in pending_apps if app['form_name'] == '–°—Ç—É–¥–µ–Ω—Ç'])}\n"
            f"üöÄ –°—Ç–∞—Ä—Ç–∞–ø–æ–≤: {len([app for app in pending_apps if app['form_name'] == '–°—Ç–∞—Ä—Ç–∞–ø'])}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ bulk –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.")

@dp.message(Command("restore"))
async def restore_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restore"""
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤
        backup_files = [f for f in os.listdir('.') if f.startswith('backup_') and f.endswith('.json')]
        
        if not backup_files:
            await message.answer("üìÅ –§–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        restored_count = 0
        for backup_file in backup_files:
            try:
                with open(backup_file, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                
                app_id = backup_data['id']
                if not db_manager.get_application(app_id):
                    form_name = backup_data['data'].get('data', {}).get('formName', 'Unknown')
                    db_manager.save_application(app_id, form_name, backup_data['data'], backup_file)
                    restored_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {backup_file}: {e}")
        
        await message.answer(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {restored_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restore_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(Command("approve"))
async def approve_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /approve"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: /approve abc123")
            return
            
        app_id = command_parts[1]
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /approve abc123")
        return

    application = db_manager.get_application(app_id)
    if not application or application['status'] != 'pending':
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö.")
        return

    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        public_message = format_public_message(application['data'])
        await bot.send_message(CHANNEL_ID, public_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        db_manager.update_application_status(app_id, 'approved')

        await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")

@dp.message(Command("reject"))
async def reject_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reject"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: /reject abc123")
            return
            
        app_id = command_parts[1]
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /reject abc123")
        return

    application = db_manager.get_application(app_id)
    if not application or application['status'] != 'pending':
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö.")
        return

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        db_manager.update_application_status(app_id, 'rejected')

        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")

@dp.callback_query(lambda c: c.data and c.data.startswith('approve_'))
async def approve_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    try:
        app_id = callback_query.data.split('_')[1]
        
        application = db_manager.get_application(app_id)
        if not application or application['status'] != 'pending':
            await callback_query.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        public_message = format_public_message(application['data'])
        await bot.send_message(CHANNEL_ID, public_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        db_manager.update_application_status(app_id, 'approved')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        new_text = callback_query.message.text + f"\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù–û</b> ({datetime.now().strftime('%H:%M %d.%m.%Y')})"
        await callback_query.message.edit_text(new_text, reply_markup=None)
        
        await callback_query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", show_alert=False)
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id} —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {e}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith('reject_'))
async def reject_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    try:
        app_id = callback_query.data.split('_')[1]
        
        application = db_manager.get_application(app_id)
        if not application or application['status'] != 'pending':
            await callback_query.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        db_manager.update_application_status(app_id, 'rejected')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        new_text = callback_query.message.text + f"\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b> ({datetime.now().strftime('%H:%M %d.%m.%Y')})"
        await callback_query.message.edit_text(new_text, reply_markup=None)
        
        await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=False)
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id} —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {e}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {str(e)}", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith('details_'))
async def details_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.", show_alert=True)
        return

    try:
        app_id = callback_query.data.split('_')[1]
        
        application = db_manager.get_application(app_id)
        if not application:
            await callback_query.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        details_message = f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ #{app_id}</b>\n\n"
        details_message += f"üìù <b>–§–æ—Ä–º–∞:</b> {application['form_name']}\n"
        details_message += f"üìÖ <b>–ü–æ–ª—É—á–µ–Ω–∞:</b> {datetime.fromisoformat(application['created_at']).strftime('%H:%M %d.%m.%Y')}\n"
        details_message += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {application['status']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
        fields = application['data'].get('data', {}).get('fields', [])
        for field in fields:
            label = field.get('label', '')
            value = field.get('value', '')
            field_type = field.get('type', '')
            
            if not value or value in [False, []] or (field.get('key', '').count('_') > 1):
                continue
                
            if field_type == 'CHECKBOXES' and isinstance(value, list):
                options = field.get('options', [])
                selected_texts = []
                for option_id in value:
                    for option in options:
                        if option.get('id') == option_id:
                            selected_texts.append(option.get('text', ''))
                if selected_texts:
                    value = ', '.join(selected_texts)
            
            if value and value != False:
                details_message += f"‚Ä¢ <b>{label}:</b> {value}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
            ] if application['status'] == 'pending' else []
        ])

        await callback_query.message.answer(details_message, reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ #{app_id}: {e}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith('detailed_stats'))
async def detailed_stats_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)
        return

    try:
        stats = db_manager.get_statistics()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        pending_apps = db_manager.get_pending_applications()
        
        detailed_message = f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        detailed_message += f"üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        detailed_message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_received']}\n"
        detailed_message += f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['total_approved']} ({(stats['total_approved'] / max(stats['total_received'], 1) * 100):.1f}%)\n"
        detailed_message += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['total_rejected']} ({(stats['total_rejected'] / max(stats['total_received'], 1) * 100):.1f}%)\n"
        detailed_message += f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending']}\n\n"
        
        detailed_message += f"üìä <b>–ü–æ —Ç–∏–ø–∞–º —Ñ–æ—Ä–º:</b>\n"
        detailed_message += f"üöÄ –°—Ç–∞—Ä—Ç–∞–ø—ã: {stats['startup_forms']}\n"
        detailed_message += f"üéì –°—Ç—É–¥–µ–Ω—Ç—ã: {stats['student_forms']}\n\n"
        
        if pending_apps:
            detailed_message += f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:</b>\n"
            for app in pending_apps[:5]:
                created_time = datetime.fromisoformat(app['created_at']).strftime('%d.%m %H:%M')
                detailed_message += f"‚Ä¢ #{app['id']} - {app['form_name']} ({created_time})\n"
            if len(pending_apps) > 5:
                detailed_message += f"... –∏ –µ—â–µ {len(pending_apps) - 5} –∑–∞—è–≤–æ–∫\n"
        
        detailed_message += f"\nüïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="detailed_stats")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö", callback_data="pending_list")]
        ])
        
        await callback_query.message.edit_text(detailed_message, reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith('pending_list'))
async def pending_list_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.", show_alert=True)
        return

    try:
        pending_apps = db_manager.get_pending_applications()
        
        if not pending_apps:
            await callback_query.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏", show_alert=True)
            return
        
        pending_message = f"‚è≥ <b>–ó–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ ({len(pending_apps)}):</b>\n\n"
        
        for i, app in enumerate(pending_apps[:10], 1):
            created_time = datetime.fromisoformat(app['created_at']).strftime('%d.%m %H:%M')
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ –ø–æ–ª–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            fields = app['data'].get('data', {}).get('fields', [])
            brief_info = ""
            for field in fields:
                if field.get('label', '').lower() in ['–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è', '–Ω–∞–∑–≤–∞–Ω–∏–µ/–∏–º—è', '–∏–º—è'] and field.get('value'):
                    brief_info = f" - {field['value'][:20]}{'...' if len(field['value']) > 20 else ''}"
                    break
            
            pending_message += f"{i}. #{app['id']} - {app['form_name']} ({created_time}){brief_info}\n"
        
        if len(pending_apps) > 10:
            pending_message += f"\n... –∏ –µ—â–µ {len(pending_apps) - 10} –∑–∞—è–≤–æ–∫"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="pending_list")],
            [InlineKeyboardButton(text="üìä –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="detailed_stats")]
        ])
        
        await callback_query.message.edit_text(pending_message, reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith('export_menu'))
async def export_menu_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", show_alert=True)
        return

    try:
        export_message = "üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="export_all")],
            [InlineKeyboardButton(text="‚úÖ –¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="export_approved")],
            [InlineKeyboardButton(text="‚ùå –¢–æ–ª—å–∫–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="export_rejected")],
            [InlineKeyboardButton(text="‚è≥ –¢–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ", callback_data="export_pending")]
        ])
        
        await callback_query.message.edit_text(export_message, reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith('bulk_'))
async def bulk_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.", show_alert=True)
        return

    try:
        action = callback_query.data.split('_', 1)[1]
        
        await callback_query.answer("‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é...", show_alert=False)
        
        pending_apps = db_manager.get_pending_applications()
        processed_count = 0
        
        if action == "approve_students":
            for app in pending_apps:
                if app['form_name'] == '–°—Ç—É–¥–µ–Ω—Ç':
                    try:
                        public_message = format_public_message(app['data'])
                        await bot.send_message(CHANNEL_ID, public_message)
                        db_manager.update_application_status(app['id'], 'approved')
                        processed_count += 1
                        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {app['id']}: {e}")
                        
        elif action == "approve_startups":
            for app in pending_apps:
                if app['form_name'] == '–°—Ç–∞—Ä—Ç–∞–ø':
                    try:
                        public_message = format_public_message(app['data'])
                        await bot.send_message(CHANNEL_ID, public_message)
                        db_manager.update_application_status(app['id'], 'approved')
                        processed_count += 1
                        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–∞–ø–∞ {app['id']}: {e}")
                        
        elif action == "reject_old":
            cutoff_date = datetime.now() - timedelta(days=7)
            for app in pending_apps:
                app_date = datetime.fromisoformat(app['created_at'])
                if app_date < cutoff_date:
                    db_manager.update_application_status(app['id'], 'rejected')
                    processed_count += 1
        
        result_text = f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: {processed_count}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            callback_query.message.text + f"\n\n{result_text}",
            reply_markup=None
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith('export_'))
async def export_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", show_alert=True)
        return

    try:
        export_type = callback_query.data.split('_')[1]
        
        if export_type == 'menu':
            return  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ export_menu_callback_handler
        
        await callback_query.answer("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞...", show_alert=False)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        status_map = {
            'all': None,
            'approved': 'approved',
            'rejected': 'rejected',
            'pending': 'pending'
        }
        
        status = status_map.get(export_type)
        filename = db_manager.export_to_csv(status)
        
        if filename:
            with open(filename, 'rb') as file:
                caption = f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ ({export_type})\nüïê {datetime.now().strftime('%H:%M %d.%m.%Y')}"
                await bot.send_document(ADMIN_ID, file, caption=caption)
            os.remove(filename)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            
            await callback_query.message.answer("‚úÖ –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ ({export_type}): {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–ø—É—Å–∫
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        polling_task = asyncio.create_task(dp.start_polling(bot, skip_updates=True))
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üìã Admin ID: {ADMIN_ID}")
        logger.info(f"üì¢ Channel: {CHANNEL_ID}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        try:
            deleted_count = db_manager.cleanup_old_applications(30)
            if deleted_count > 0:
                logger.info(f"üóëÔ∏è –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
        try:
            stats = db_manager.get_statistics()
            startup_msg = (
                "üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n"
                "üìä –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ.\n"
                "üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.\n\n"
                f"üìà <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending']}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_received']}"
            )
            await bot.send_message(ADMIN_ID, startup_msg)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
    try:
        polling_task.cancel()
        await bot.session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

app = FastAPI(title="Kickoff Bot API", version="2.0.0", lifespan=lifespan)

@app.post("/webhook")
async def webhook_handler(request: Request, background_tasks: BackgroundTasks):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Tally"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        raw_data = await request.body()
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook (—Ä–∞–∑–º–µ—Ä: {len(raw_data)} –±–∞–π—Ç)")

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = await request.json()
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if not validate_webhook_data(data):
            logger.warning("–î–∞–Ω–Ω—ã–µ webhook –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –∑–∞—è–≤–∫–∏
        app_id = generate_application_id()
        form_name = data.get('data', {}).get('formName', '')

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(backup_application, app_id, data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
        backup_filename = f"backup_{app_id}.json"
        db_manager.save_application(app_id, form_name, data, backup_filename)
        logger.info(f"üíæ –ó–∞—è–≤–∫–∞ #{app_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î (—Ç–∏–ø: {form_name})")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = format_application_message(data, app_id)

        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
            ],
            [InlineKeyboardButton(text="üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{app_id}")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(send_notification_to_admin, admin_message, keyboard)

        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

        return {
            "status": "success", 
            "application_id": app_id,
            "form_type": form_name,
            "timestamp": datetime.now().isoformat(),
            "saved_to_database": True
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    stats = db_manager.get_statistics()
    return {
        "service": "Kickoff Bot API",
        "version": "2.0.0",
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "database": "connected",
        "statistics": stats,
        "endpoints": {
            "webhook": "/webhook",
            "health": "/health",
            "test_webhook": "/test-webhook",
            "metrics": "/metrics"
        }
    }

@app.get("/health")
async def health():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        bot_info = await bot.get_me()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        stats = db_manager.get_statistics()
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "bot": {
                "username": bot_info.username,
                "id": bot_info.id,
                "status": "connected"
            },
            "database": {
                "status": "connected",
                "total_applications": stats['total_received']
            },
            "statistics": stats
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/metrics")
async def metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        stats = db_manager.get_statistics()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        pending_apps = db_manager.get_pending_applications()
        avg_response_time = "N/A"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        return {
            "timestamp": datetime.now().isoformat(),
            "applications": {
                "total": stats['total_received'],
                "approved": stats['total_approved'],
                "rejected": stats['total_rejected'],
                "pending": stats['pending'],
                "approval_rate": round(stats['total_approved'] / max(stats['total_received'], 1) * 100, 2)
            },
            "forms": {
                "startups": stats['startup_forms'],
                "students": stats['student_forms']
            },
            "performance": {
                "average_response_time": avg_response_time,
                "oldest_pending": pending_apps[0]['created_at'] if pending_apps else None
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        return {"error": str(e)}

@app.post("/test-webhook")
async def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    test_data = {
        "eventType": "FORM_RESPONSE",
        "data": {
            "formName": "–¢–µ—Å—Ç",
            "fields": [
                {"label": "–ò–º—è", "value": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "type": "INPUT_TEXT"},
                {"label": "E-mail", "value": "test@example.com", "type": "INPUT_TEXT"},
                {"label": "–¢–µ–ª–µ—Ñ–æ–Ω", "value": "+7 999 123 45 67", "type": "INPUT_TEXT"},
                {"label": "–ù–∞–≤—ã–∫–∏", "value": "Python, JavaScript", "type": "INPUT_TEXT"},
                {"label": "–û–ø—ã—Ç", "value": "3 –≥–æ–¥–∞", "type": "INPUT_TEXT"}
            ]
        }
    }

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –∑–∞—è–≤–∫–∏
        app_id = generate_application_id()
        form_name = test_data.get('data', {}).get('formName', '')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db_manager.save_application(app_id, form_name, test_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = format_application_message(test_data, app_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_ID, admin_message)

        logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")

        return {
            "status": "success", 
            "application_id": app_id, 
            "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
            "timestamp": datetime.now().isoformat(),
            "saved_to_database": True
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {e}")
        return {
            "status": "error", 
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Kickoff Bot API v2.0...")
    uvicorn.run(app, host="0.0.0.0", port=3000)
